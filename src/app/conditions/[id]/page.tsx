"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import ProgressBar from "~/app/_components/ProgressBar";
import { type ConditionPrediction, type SymptomAnalysisResponse } from "~/utils/ai";

interface ConditionDetailsPageProps {
  params: {
    id: string;
  };
}

export default function ConditionDetailsPage({ params }: ConditionDetailsPageProps) {
  const router = useRouter();
  const conditionId = params.id;
  
  const [condition, setCondition] = useState<ConditionPrediction | null>(null);
  const [allConditions, setAllConditions] = useState<ConditionPrediction[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const [shareUrl, setShareUrl] = useState("");
  
  // Load condition and all conditions from localStorage
  useEffect(() => {
    try {
      // Get stored analysis result
      const analysisResultStr = localStorage.getItem("analysisResult");
      if (!analysisResultStr) {
        // If no analysis exists, redirect to conditions page
        router.push("/conditions");
        return;
      }
      
      const analysisResult = JSON.parse(analysisResultStr) as SymptomAnalysisResponse;
      const conditions = analysisResult.conditions;
      
      // Find the requested condition and its index
      const foundIndex = conditions.findIndex(c => c.id === conditionId);
      if (foundIndex === -1) {
        // If condition not found, redirect to conditions page
        router.push("/conditions");
        return;
      }
      
      setAllConditions(conditions);
      setCondition(conditions[foundIndex] ?? null);
      setCurrentIndex(foundIndex);
      
      // Generate share URL
      if (typeof window !== 'undefined') {
        setShareUrl(window.location.href);
      }
      
      setIsLoading(false);
    } catch (error) {
      console.error("Error loading condition:", error);
      router.push("/conditions");
    }
  }, [conditionId, router]);
  
  // Handle navigation between conditions
  const navigateToPrevious = () => {
    if (currentIndex > 0) {
      const prevCondition = allConditions[currentIndex - 1];
      if (prevCondition) {
        router.push(`/conditions/${prevCondition.id}`);
      }
    }
  };
  
  const navigateToNext = () => {
    if (currentIndex < allConditions.length - 1) {
      const nextCondition = allConditions[currentIndex + 1];
      if (nextCondition) {
        router.push(`/conditions/${nextCondition.id}`);
      }
    }
  };
  
  // Handle continue to treatment
  const handleContinue = () => {
    router.push("/details");
  };
  
  // Handle back to all conditions
  const handleBackToConditions = () => {
    router.push("/conditions");
  };
  
  // Handle sharing
  const handleShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: `SymptoTrack: ${condition?.name} Information`,
          text: `Check out this information about ${condition?.name} from SymptoTrack.`,
          url: shareUrl,
        });
      } catch (error) {
        console.error("Error sharing:", error);
        // Fallback to clipboard copy
        copyToClipboard();
      }
    } else {
      // Fallback to clipboard copy
      copyToClipboard();
    }
  };
  
  // Copy URL to clipboard
  const copyToClipboard = () => {
    navigator.clipboard.writeText(shareUrl)
      .then(() => {
        alert("Link copied to clipboard!");
      })
      .catch(err => {
        console.error("Failed to copy link:", err);
      });
  };
  
  // Download condition information as PDF (simplified version)
  const handleDownload = () => {
    if (!condition) return;
    
    // In a real implementation, this would use a PDF library
    // For simplicity, we're creating a text file
    const content = `
CONDITION REPORT: ${condition.name}

Description:
${condition.description}

Confidence: ${Math.round(condition.confidence * 100)}%
Severity: ${condition.isSevere ? "Potentially serious" : "Common condition"}

Common Symptoms:
${condition.symptoms.map(s => `- ${s}`).join('\n')}

Risk Factors:
${condition.riskFactors?.map(r => `- ${r}`).join('\n') || "No specific risk factors listed."}

Possible Causes:
${condition.possibleCauses?.map(c => `- ${c}`).join('\n') || "No specific causes listed."}

Treatment Approaches:
${condition.treatmentApproaches.map(t => `- ${t}`).join('\n')}

When to See a Doctor:
${condition.whenToSeeDoctor.map(w => `- ${w}`).join('\n')}

DISCLAIMER: This information is provided for educational purposes only and is not intended as medical advice.
Always consult with a healthcare professional for diagnosis and treatment of medical conditions.

Generated by SymptoTrack
    `;
    
    // Create a download link
    const element = document.createElement("a");
    const file = new Blob([content], {type: 'text/plain'});
    element.href = URL.createObjectURL(file);
    element.download = `${condition.name.replace(/\s+/g, '_')}_report.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };
  
  // Save to user profile (simulation)
  const handleSave = () => {
    alert("Condition information saved to your profile.");
    // In a real app, this would save to a database
  };
  
  if (isLoading || !condition) {
    return (
      <div className="mx-auto max-w-4xl px-4 py-8">
        <div className="flex h-64 items-center justify-center">
          <div className="text-center">
            <svg 
              className="mx-auto h-12 w-12 animate-spin text-teal-500" 
              xmlns="http://www.w3.org/2000/svg" 
              fill="none" 
              viewBox="0 0 24 24"
            >
              <circle 
                className="opacity-25" 
                cx="12" 
                cy="12" 
                r="10" 
                stroke="currentColor" 
                strokeWidth="4"
              ></circle>
              <path 
                className="opacity-75" 
                fill="currentColor" 
                d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
              ></path>
            </svg>
            <p className="mt-4 text-gray-600 dark:text-gray-300">
              Loading condition details...
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="mx-auto max-w-4xl px-4 py-8">
      <h1 className="mb-2 text-center text-3xl font-bold text-gray-800 dark:text-white">
        SymptoTrack
      </h1>
      <p className="mb-8 text-center text-xl text-teal-600 dark:text-teal-400">
        Track your symptoms, understand your health
      </p>
      
      <div className="rounded-lg bg-white p-8 shadow-lg dark:bg-gray-800">
        <ProgressBar currentStep="details" />
        
        <div className="mb-8 rounded-md bg-blue-50 p-4 text-sm text-blue-800 dark:bg-blue-900/30 dark:text-blue-200">
          <p className="font-medium">
            <strong>Medical Disclaimer:</strong> This information is provided for educational purposes only and is not intended as medical advice. Always consult with a healthcare professional for diagnosis and treatment of medical conditions.
          </p>
        </div>
        
        {/* Condition navigation */}
        <div className="mb-8 flex items-center justify-between text-sm text-gray-600 dark:text-gray-400">
          <button 
            onClick={navigateToPrevious}
            disabled={currentIndex === 0}
            className={`flex items-center ${currentIndex === 0 ? 'cursor-not-allowed opacity-50' : 'hover:text-teal-600 dark:hover:text-teal-400'}`}
          >
            <svg className="mr-1 h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
            </svg>
            Previous Condition
          </button>
          
          <span>
            Condition {currentIndex + 1} of {allConditions.length}
          </span>
          
          <button 
            onClick={navigateToNext}
            disabled={currentIndex === allConditions.length - 1}
            className={`flex items-center ${currentIndex === allConditions.length - 1 ? 'cursor-not-allowed opacity-50' : 'hover:text-teal-600 dark:hover:text-teal-400'}`}
          >
            Next Condition
            <svg className="ml-1 h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
              <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
            </svg>
          </button>
        </div>
        
        {/* Condition header */}
        <div className="mb-6 flex flex-wrap items-start justify-between gap-4">
          <div>
            <h2 className="text-2xl font-bold text-gray-800 dark:text-white">
              {condition.name}
            </h2>
            
            <div className="mt-2 flex flex-wrap gap-2">
              <span className={`inline-block rounded-full px-3 py-1 text-sm font-medium ${
                condition.confidence >= 0.75
                  ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
                  : condition.confidence >= 0.5
                  ? "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200"
                  : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200"
              }`}>
                {Math.round(condition.confidence * 100)}% confidence
              </span>
              
              {condition.isSevere && (
                <span className="inline-block rounded-full bg-red-100 px-3 py-1 text-sm font-medium text-red-800 dark:bg-red-900 dark:text-red-200">
                  Potentially serious
                </span>
              )}
            </div>
          </div>
          
          <div className="flex gap-2">
            <button 
              onClick={handleShare}
              className="rounded-md border border-gray-300 bg-white p-2 text-gray-500 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
              title="Share"
              aria-label="Share condition information"
            >
              <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path d="M15 8a3 3 0 10-2.977-2.63l-4.94 2.47a3 3 0 100 4.319l4.94 2.47a3 3 0 10.895-1.789l-4.94-2.47a3.027 3.027 0 000-.74l4.94-2.47C13.456 7.68 14.19 8 15 8z" />
              </svg>
            </button>
            
            <button 
              onClick={handleDownload}
              className="rounded-md border border-gray-300 bg-white p-2 text-gray-500 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
              title="Download"
              aria-label="Download condition information"
            >
              <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fillRule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 00-1.414-1.414L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clipRule="evenodd" />
              </svg>
            </button>
            
            <button 
              onClick={handleSave}
              className="rounded-md border border-gray-300 bg-white p-2 text-gray-500 hover:bg-gray-50 dark:border-gray-600 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600"
              title="Save"
              aria-label="Save condition to profile"
            >
              <svg className="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path d="M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-2.5L5 18V4z" />
              </svg>
            </button>
          </div>
        </div>
        
        {/* Main content */}
        <div className="mb-8 space-y-8">
          {/* Description section */}
          <section>
            <h3 className="mb-3 text-lg font-semibold text-gray-800 dark:text-white">
              About this Condition
            </h3>
            <p className="text-gray-600 dark:text-gray-300">
              {condition.description}
            </p>
          </section>
          
          {/* Symptoms section */}
          <section>
            <h3 className="mb-3 text-lg font-semibold text-gray-800 dark:text-white">
              Common Symptoms
            </h3>
            <div className="rounded-md bg-gray-50 p-4 dark:bg-gray-750">
              <ul className="grid grid-cols-1 gap-2 sm:grid-cols-2">
                {condition.symptoms.map((symptom, index) => (
                  <li key={index} className="flex items-start">
                    <svg className="mr-2 mt-1 h-4 w-4 flex-shrink-0 text-teal-500" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                    <span className="text-gray-600 dark:text-gray-300">
                      {typeof symptom === 'string' ? symptom : symptom}
                    </span>
                  </li>
                ))}
              </ul>
            </div>
          </section>
          
          {/* Risk factors section */}
          {condition.riskFactors && condition.riskFactors.length > 0 && (
            <section>
              <h3 className="mb-3 text-lg font-semibold text-gray-800 dark:text-white">
                Risk Factors
              </h3>
              <div className="rounded-md bg-gray-50 p-4 dark:bg-gray-750">
                <ul className="grid grid-cols-1 gap-2 sm:grid-cols-2">
                  {condition.riskFactors.map((factor, index) => (
                    <li key={index} className="flex items-start">
                      <svg className="mr-2 mt-1 h-4 w-4 flex-shrink-0 text-yellow-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                      <span className="text-gray-600 dark:text-gray-300">
                        {factor}
                      </span>
                    </li>
                  ))}
                </ul>
              </div>
            </section>
          )}
          
          {/* Causes section */}
          {condition.possibleCauses && condition.possibleCauses.length > 0 && (
            <section>
              <h3 className="mb-3 text-lg font-semibold text-gray-800 dark:text-white">
                Possible Causes
              </h3>
              <div className="rounded-md bg-gray-50 p-4 dark:bg-gray-750">
                <ul className="space-y-2">
                  {condition.possibleCauses.map((cause, index) => (
                    <li key={index} className="flex items-start">
                      <svg className="mr-2 mt-1 h-4 w-4 flex-shrink-0 text-blue-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                      </svg>
                      <span className="text-gray-600 dark:text-gray-300">
                        {cause}
                      </span>
                    </li>
                  ))}
                </ul>
              </div>
            </section>
          )}
          
          {/* Treatment preview section */}
          <section>
            <h3 className="mb-3 text-lg font-semibold text-gray-800 dark:text-white">
              Treatment Approaches
            </h3>
            <div className="rounded-md bg-gray-50 p-4 dark:bg-gray-750">
              <ul className="space-y-2">
                {condition.treatmentApproaches.map((treatment, index) => (
                  <li key={index} className="flex items-start">
                    <svg className="mr-2 mt-1 h-4 w-4 flex-shrink-0 text-teal-500" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                    </svg>
                    <span className="text-gray-600 dark:text-gray-300">
                      {treatment}
                    </span>
                  </li>
                ))}
              </ul>
              
              <div className="mt-4 text-center">
                <p className="mb-2 text-sm text-gray-600 dark:text-gray-300">
                  Continue to get personalized treatment recommendations.
                </p>
                <button
                  onClick={handleContinue}
                  className="rounded-md bg-teal-500 px-4 py-2 text-sm font-medium text-white hover:bg-teal-600 dark:bg-teal-600 dark:hover:bg-teal-700"
                >
                  Get Treatment Recommendations
                </button>
              </div>
            </div>
          </section>
          
          {/* When to see a doctor section */}
          <section className="rounded-md bg-red-50 p-6 dark:bg-red-900/20">
            <h3 className="mb-3 text-lg font-semibold text-red-800 dark:text-red-200">
              When to See a Doctor
            </h3>
            <ul className="space-y-2">
              {condition.whenToSeeDoctor.map((item, index) => (
                <li key={index} className="flex items-start">
                  <svg className="mr-2 mt-1 h-4 w-4 flex-shrink-0 text-red-600 dark:text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                  </svg>
                  <span className="text-red-700 dark:text-red-300">
                    {item}
                  </span>
                </li>
              ))}
            </ul>
          </section>
          
          {/* Learn more section */}
          <section>
            <h3 className="mb-3 text-lg font-semibold text-gray-800 dark:text-white">
              Learn More
            </h3>
            <div className="rounded-md bg-gray-50 p-4 dark:bg-gray-750">
              <p className="mb-3 text-gray-600 dark:text-gray-300">
                For more comprehensive and authoritative information about {condition.name}, visit these trusted medical resources:
              </p>
              <ul className="space-y-2">
                <li>
                  <a 
                    href={`https://www.mayoclinic.org/search/search-results?q=${encodeURIComponent(condition.name)}`} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="flex items-center text-teal-600 underline hover:text-teal-800 dark:text-teal-400 dark:hover:text-teal-300"
                  >
                    <svg className="mr-2 h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z" />
                      <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z" />
                    </svg>
                    Mayo Clinic
                  </a>
                </li>
                <li>
                  <a 
                    href={`https://medlineplus.gov/search.html?query=${encodeURIComponent(condition.name)}`} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="flex items-center text-teal-600 underline hover:text-teal-800 dark:text-teal-400 dark:hover:text-teal-300"
                  >
                    <svg className="mr-2 h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z" />
                      <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z" />
                    </svg>
                    MedlinePlus (NIH)
                  </a>
                </li>
                <li>
                  <a 
                    href={`https://www.cdc.gov/search/?query=${encodeURIComponent(condition.name)}`} 
                    target="_blank" 
                    rel="noopener noreferrer"
                    className="flex items-center text-teal-600 underline hover:text-teal-800 dark:text-teal-400 dark:hover:text-teal-300"
                  >
                    <svg className="mr-2 h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                      <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z" />
                      <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z" />
                    </svg>
                    Centers for Disease Control and Prevention (CDC)
                  </a>
                </li>
              </ul>
            </div>
          </section>
        </div>
        
        {/* Navigation buttons */}
        <div className="mt-8 flex flex-wrap justify-between gap-4">
          <button
            onClick={handleBackToConditions}
            className="flex items-center rounded-lg bg-gray-200 px-5 py-2.5 text-sm font-medium text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-200 dark:hover:bg-gray-600"
          >
            <svg
              className="mr-2 h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M15 19l-7-7 7-7"
              />
            </svg>
            Back to All Conditions
          </button>
          
          <button
            onClick={handleContinue}
            className="flex items-center rounded-lg bg-teal-500 px-5 py-2.5 text-sm font-medium text-white hover:bg-teal-600 dark:bg-teal-600 dark:hover:bg-teal-700"
          >
            Continue
            <svg
              className="ml-2 h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M9 5l7 7-7 7"
              />
            </svg>
          </button>
        </div>
      </div>
    </div>
  );
} 