// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?
    emailVerified DateTime?
    image         String?
    password      String?
    age           Int?
    sex           String?
    
    accounts      Account[]
    sessions      Session[]
    trackingSessions TrackingSession[]
    userSymptoms  UserSymptom[]
    userConditions UserCondition[]
    posts         Post[]
    passwordResets PasswordReset[]

    // Ensure email is unique only if it's present
    @@unique([email], name: "email_unique_if_exists", map: "email_unique_if_exists")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Password reset tokens
model PasswordReset {
    id        String   @id @default(cuid())
    token     String   @unique
    email     String
    expires   DateTime
    createdAt DateTime @default(now())
    
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@index([email])
    @@index([userId])
    @@index([token])
}

// SymptoTrack Models

model TrackingSession {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    currentStep String   @default("info") // info, symptoms, conditions, details, treatment
    completed   Boolean  @default(false)
    
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    userSymptoms    UserSymptom[]
    userConditions  UserCondition[]
}

model BodyPart {
    id          String   @id @default(cuid())
    name        String   @unique
    svgId       String   @unique // ID in the SVG for the body part
    description String?
    
    symptoms    Symptom[]
}

model Symptom {
    id          String   @id @default(cuid())
    name        String   @unique
    description String?
    severityOptions String  // Comma-separated: mild,moderate,severe
    
    bodyPartId  String
    bodyPart    BodyPart @relation(fields: [bodyPartId], references: [id])
    
    userSymptoms UserSymptom[]
    conditions   SymptomCondition[]
    
    @@index([bodyPartId])
}

model UserSymptom {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    severity    String // mild, moderate, severe
    duration    String? // how long the symptom has been present
    notes       String?
    
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    symptomId   String
    symptom     Symptom  @relation(fields: [symptomId], references: [id])
    
    sessionId   String
    session     TrackingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    
    @@unique([userId, symptomId, sessionId])
    @@index([userId])
    @@index([symptomId])
    @@index([sessionId])
}

model Condition {
    id          String   @id @default(cuid())
    name        String   @unique
    description String
    treatmentInfo String?
    isSevere    Boolean  @default(false)
    
    symptoms    SymptomCondition[]
    userConditions UserCondition[]
}

model SymptomCondition {
    id          String   @id @default(cuid())
    relevance   Float    // 0.0 to 1.0, how relevant this symptom is for this condition
    
    symptomId   String
    symptom     Symptom  @relation(fields: [symptomId], references: [id])
    
    conditionId String
    condition   Condition @relation(fields: [conditionId], references: [id])
    
    @@unique([symptomId, conditionId])
    @@index([symptomId])
    @@index([conditionId])
}

model UserCondition {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    confidenceScore Float // AI-generated confidence (0.0 to 1.0)
    userConfirmed Boolean? // User feedback if this was accurate
    notes       String?
    
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    conditionId String
    condition   Condition @relation(fields: [conditionId], references: [id])
    
    sessionId   String
    session     TrackingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    
    @@unique([userId, conditionId, sessionId])
    @@index([userId])
    @@index([conditionId])
    @@index([sessionId])
}
